// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"HAsN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var emojis = [0x1F600, 0x1F604, 0x1F34A, 0x1F344, 0x1F37F, 0x1F363, 0x1F370, 0x1F355, 0x1F354, 0x1F35F, 0x1F6C0, 0x1F48E, 0x1F5FA, 0x23F0, 0x1F579, 0x1F4DA, 0x1F431, 0x1F42A, 0x1F439, 0x1F424, 0x1F600, 0x1F603, 0x1F604, 0x1F601, 0x1F606, 0x1F605, 0x1F923, 0x1F602, 0x1F642, 0x1F643, 0x1F609, 0x1F60A, 0x1F607, 0x1F920, 0x1F60E, 0x1F913, 0x1F9D0, 0x1F340, 0x1F3D6, 0x1F31D, 0x1F5FF, 0x262E];
var idx = Math.floor(Math.random() * 41) + 0;
var popElement;
var initObject;
var dodexObject;
var faceElements;
var maxScrollTop = 0;
var handle = null;
var id = null;
var selectedUsers = [];
var broadcast = "Broadcast";
var privateMessage = "Private Message"; // function isASCII(str, extended) {
//     return (extended ? /^[\x00-\xFF]*$/ : /^[\x00-\x7F]*$/).test(str);
// }

var communicate = function communicate()
/*event*/
{
  if (handle) {
    return;
  }

  idx = Math.floor(Math.random() * 41) + 0;
  dodexMess.server = dodexObject.server;
  dodexObject.mess.getUUID(dodexObject.handle + String.fromCodePoint(emojis[idx])).then(function (record) {
    if (typeof record === "string") {
      console.error(record);
    } else {
      var key = btoa(record.comm.id);
      id = record.comm.id;
      dodexObject.mess.webSocket({
        handle: record.comm.handle,
        id: key
      });
      document.querySelector(".handle").innerHTML = handle;
      document.querySelector(".dodex-comm").classList.toggle("pop-show");
    }
  });
};

var closeWebSocket = function closeWebSocket()
/*event*/
{
  dodexMess.socket.close(1000);
  document.querySelector(".handle").innerHTML = "";
  var chatbox = document.querySelector(".chat-box");
  chatbox.innerHTML = "";
  maxScrollTop = 0;
  handle = null;
  id = null;
  selectedUsers = [];
  var dodexComm = document.querySelector("#dodexComm");
  dodexComm.querySelector("a[name=\"private\"]").innerHTML = privateMessage;
  dodexComm.classList.toggle("pop-show");
  var body = document.body;
  var html = document.documentElement;
  body.scrollTop = 0;
  html.scrollTop = 0;
};

var dodexMess = {
  popup: function popup(initObj, dodexObj, faceEle) {
    initObject = initObj;
    faceElements = faceEle;
    dodexObject = dodexObj;

    if (typeof popElement === "undefined") {
      popElement = buildPopup(dodexObject);
      popElement.onclick = communicate;
    }

    getHandle("comm").then(function (data) {
      if (typeof data === "string") {
        buildHandleInput();
        document.querySelector("#commHandle").classList.toggle("pop-show");
      } else {
        popElement.click();
      }
    });
  },
  socket: null,
  server: "localhost:3087",
  getUUID: function getUUID(handle) {
    return dbStorage(handle);
  },
  webSocket: function webSocket(keys) {
    if (keys && keys.handle && keys.id) {
      // const idx = Math.floor(Math.random() * 41) + 0;
      // if (!isASCII(keys.id, true)) {
      //     throw "Handle must be in the extended ascii range";
      // }
      handle = keys.handle; // + String.fromCodePoint(emojis[idx]);
      // id = keys.id;

      var protocol = "ws://";

      if (window.location.protocol === "https:") {
        protocol = "wss://";
      }

      this.socket = new WebSocket(protocol + this.server + "/dodex?handle=" + handle + "&id=" + encodeURIComponent(keys.id)); // "protocol");
      //     JSON.stringify({
      //         perMessageDeflate: false,
      //         headers: {
      //         Authorization: `Basic btoa(${handle}${keys.id})`,
      //         }
      //     })
      // )
    } else {
      throw new Error("Must supply 'handle' and 'id' for WebSocket");
    }

    this.socket.onerror = function (event) {
      console.error(event);
    };

    this.socket.onopen = function () {
      document.querySelector(".input-send").onclick = sendMessage;
    };

    this.socket.onmessage = function (event) {
      var d = new Date();
      var h = addZero(d.getHours());
      var m = addZero(d.getMinutes());
      var chatbox = document.querySelector(".chat-box");
      var data = parseData(event.data);
      chatbox.innerHTML += "".concat(h, ":").concat(m, " ").concat(data, "<br>");

      if (chatbox.scrollTop > maxScrollTop || maxScrollTop === 0) {
        maxScrollTop = chatbox.scrollTop;
        chatbox.scrollTop = chatbox.scrollHeight;
      }
    };

    this.socket.onclose = function (event) {
      handle = null;

      if (event.code !== 1000) {
        console.warn("Closed", event.code);
      }
    };

    return this.socket;
  }
};

function parseData(data) {
  var users = data.split("connected:");

  if (users.length < 2) {
    return data;
  } else {
    buildUserList(JSON.parse(users[1]));
  }

  return "connected";
}

function sendMessage() {
  var userMes = document.querySelector("#dodexComm").querySelector(".user-msg");
  var content = userMes.innerHTML; // textContent;
  //This is code to remove html from message. - not needed?
  // || userMes.innerText || '';
  // console.log("Stuff", userMes.textContent, userMes.innerText)
  // message.replace('\u200B', ''); // zero width space
  // message = message.trim();
  // return res;

  if (content.length > 1) {
    var message = attachSelectedUsers(content);
    dodexMess.socket.send(message);
    userMes.innerHTML = "";
  }
}

function attachSelectedUsers(message) {
  if (document.querySelector("#dodexComm").querySelector("a[name=\"private\"]").innerHTML === broadcast) {
    return message + ";users!!" + JSON.stringify(selectedUsers);
  }

  return message;
}

window.doDexMess = dodexMess;
var _default = dodexMess;
exports.default = _default;

function getHandle()
/*comm*/
{
  return new Promise(function (resolve
  /*, reject*/
  ) {
    var request = indexedDB.open("dodex-comm");

    request.onupgradeneeded = function () {
      var db = request.result; // const store = 

      db.createObjectStore("comm", {
        keyPath: "idx",
        autoIncrement: false
      });
    };

    request.onsuccess = function (evt) {
      queryComm("comm", evt.target.result).then(function (record) {
        evt.target.result.close();
        resolve(record);
      });
    };

    request.onerror = function (evt) {
      console.warn(evt);
    };
  });
}

function dbStorage(handle) {
  return new Promise(function (resolve
  /*, reject*/
  ) {
    var request = indexedDB.open("dodex-comm");
    var db, tx, store; // , lastEntry;

    request.onupgradeneeded = function () {
      db = request.result;
      store = db.createObjectStore("comm", {
        keyPath: "idx",
        autoIncrement: false
      });
    };

    request.onsuccess = function (evt) {
      db = evt.target.result;
      queryComm("comm", db).then(function (record) {
        if (typeof record !== "string") {
          db.close();
          resolve(record);
          return;
        }

        tx = db.transaction("comm", "readwrite");
        store = tx.objectStore("comm");
        var uuid = v4();
        var data = {};
        var override = handle.split("-:-");

        if (override.length === 2) {
          handle = override[0];
          uuid = override[1].substr(0, override[1].length - 2); // strip out emoji
        }

        data.comm = {
          handle: handle,
          id: uuid
        };
        data.idx = "comm";
        var request = store.put(data);

        request.onsuccess = function ()
        /*event*/
        {
          queryComm("comm", db).then(function (record) {
            db.close();
            resolve(record);
          });
        };
      });
    };

    request.onerror = function (evt) {
      console.error("Error", evt.target);
    };
  });
}

function queryComm(comm, db) {
  return new Promise(function (resolve, reject) {
    var tx, store;

    if (db.objectStoreNames.length === 0) {
      resolve("Store ".concat(comm, " not found"));
    }

    tx = db.transaction(["comm"], "readonly");
    store = tx.objectStore("comm");
    var get = store.get(comm);

    get.onsuccess = function () {
      var record = get.result;

      if (record !== undefined) {
        resolve(record);
      } else {
        resolve("Record ".concat(comm, " not found"));
      }
    };

    get.onerror = function (evt) {
      reject("Record ".concat(comm, " not found : ").concat(evt));
    };
  });
}

function saveHandle()
/*event*/
{
  var inputElement = document.querySelector(".handle-msg");
  dodexObject.handle = inputElement.value;

  if (inputElement.value.length < 4) {
    return;
  }

  inputElement.value = "";
  document.querySelector("#commHandle").classList.toggle("pop-show");
  popElement.click();
}

function buildPopup()
/*dodexObject*/
{
  var parent = document.querySelector("body");
  var divElement = document.createElement("div");
  createAttribute(divElement, "id", "dodexComm");
  createAttribute(divElement, "class", "dodex-comm");
  parent.insertBefore(divElement, document.querySelector(".top--dodex"));
  var parent2 = divElement;
  var menuElement = document.createElement("div");
  createAttribute(menuElement, "id", "menu");
  createAttribute(menuElement, "class", "menu");
  var pElement = document.createElement("p");
  createAttribute(pElement, "class", "welcome");
  pElement.innerHTML = "<h1 style=\"font-size: 14px;\">\n    <svg height=\"18\" width=\"17\" style=\"font-family: 'Open Sans', sans-serif;\">\n    <text x=\"3\" y=\"18\" fill=\"#059\">O</text><text x=\"0\" y=\"15\" fill=\"#059\">D</text></svg> doDex Messaging <span class=\"handle\"></span></h1>";
  menuElement.appendChild(pElement);
  pElement = document.createElement("p");
  addDropdownMenu(pElement);
  menuElement.appendChild(pElement);
  parent2.appendChild(menuElement);
  divElement = document.createElement("div");
  createAttribute(divElement, "id", "chatbox");
  createAttribute(divElement, "class", "chat-box");
  parent2.appendChild(divElement);
  var aElement = document.createElement("a");
  createAttribute(aElement, "id", "dodexComm");
  parent2.appendChild(aElement);
  var inputElement = document.createElement("input");
  createAttribute(inputElement, "id", "inputsend");
  createAttribute(inputElement, "value", "Send");
  createAttribute(inputElement, "class", "input-send");
  createAttribute(inputElement, "type", "button");
  parent2.appendChild(inputElement);
  divElement = document.createElement("div");
  createAttribute(divElement, "contenteditable", "true");
  createAttribute(divElement, "id", "usermsg");
  createAttribute(divElement, "class", "user-msg");
  parent2.appendChild(divElement);
  divElement.addEventListener("keydown", function (event) {
    //19 for Mac Command+S
    if (!(String.fromCharCode(event.which).toLowerCase() == "s" && event.ctrlKey) && !(event.which == 19)) {
      return true;
    }

    sendMessage();
    event.preventDefault();
    return false;
  });
  return aElement;
}

function buildHandleInput() {
  var parent = document.querySelector("body");
  var divElement = document.createElement("div");
  createAttribute(divElement, "id", "commHandle");
  createAttribute(divElement, "class", "comm-handle");
  parent.insertBefore(divElement, document.querySelector(".top--dodex"));
  var parent2 = divElement;
  var menuElement = document.createElement("div");
  createAttribute(menuElement, "id", "menuHandle");
  createAttribute(menuElement, "class", "menu");
  var pElement = document.createElement("p");
  createAttribute(pElement, "class", "welcome");
  pElement.innerHTML = "<h1 class=\"handle\" style=\"font-size: 14px;\">\n            Enter your chat handle</h1>";
  menuElement.appendChild(pElement);
  pElement = document.createElement("p");
  createAttribute(pElement, "class", "close-handle");
  var aElement = document.createElement("a");
  createAttribute(aElement, "id", "closeHandle");
  aElement.innerHTML = "Exit";

  aElement.onclick = function () {
    document.querySelector("#commHandle").classList.toggle("pop-show");
  };

  pElement.appendChild(aElement);
  menuElement.appendChild(pElement);
  parent2.appendChild(menuElement);
  aElement = document.createElement("a");
  createAttribute(aElement, "id", "handleComm");
  parent2.appendChild(aElement);
  var brElement = document.createElement("br");
  parent2.appendChild(brElement);
  var inputElement = document.createElement("input");
  createAttribute(inputElement, "id", "inputHandle");
  createAttribute(inputElement, "value", "Save");
  createAttribute(inputElement, "class", "input-save");
  createAttribute(inputElement, "type", "button");
  inputElement.onclick = saveHandle;
  parent2.appendChild(inputElement);
  divElement = document.createElement("input");
  createAttribute(divElement, "id", "handlemsg");
  createAttribute(divElement, "type", "text");
  createAttribute(divElement, "class", "handle-msg");
  parent2.appendChild(divElement);
  divElement.addEventListener("keydown", function (event) {
    if (!(String.fromCharCode(event.which).toLowerCase() == "s" && event.ctrlKey) && !(event.which == 19)) {
      return true;
    }

    saveHandle();
    event.preventDefault();
    return false;
  });
  return aElement;
}

function buildUserList(users) {
  var privateElement = document.querySelector("#dodexComm");

  if (privateElement.querySelector(".private") !== null) {
    privateElement.removeChild(privateElement.querySelector(".private"));
  }

  var sElement = document.createElement("select");
  createAttribute(sElement, "class", "private");
  createAttribute(sElement, "multiple", "true");
  var usersLength = users.length;

  for (var i = 0; i < usersLength; i++) {
    var oElement = document.createElement("option");
    createAttribute(oElement, "value", users[i].name);
    oElement.innerHTML = users[i].name;
    sElement.appendChild(oElement);
    privateElement.appendChild(sElement);
  }

  sElement.addEventListener("change", function (event) {
    selectedUsers = getSelectedOptions(event.target);
  });
}

function getSelectedOptions(selected) {
  var options = [];
  var option;
  var length = selected.options.length;

  for (var i = 0; i < length; i++) {
    option = selected.options[i];

    if (option.selected) {
      options.push(option.value);
    }
  }

  return options;
}

function removeSelectedOptions(selected) {
  var length = selected.options.length;

  for (var i = 0; i < length; i++) {
    selected.options[i].selected = false;
  }
}

function addDropdownMenu(pElement) {
  var iElement = document.createElement("img");
  createAttribute(iElement, "src", "../images/more_horiz.png"); // "more_horiz.a4d18871.png"); // "/images/more_horiz.png");

  createAttribute(iElement, "class", "image-horiz");
  var divElement = document.createElement("div");
  createAttribute(divElement, "class", "dropdown");
  divElement.appendChild(iElement);
  var divElement2 = document.createElement("div");
  createAttribute(divElement2, "id", "commDropdown");
  createAttribute(divElement2, "class", "dropdown-content");
  var aElement = document.createElement("a");
  createAttribute(aElement, "href", "#");
  aElement.innerHTML = "Clear Log";
  divElement2.appendChild(aElement);
  aElement = document.createElement("a");
  createAttribute(aElement, "href", "#");
  aElement.innerHTML = "Change Handle";
  divElement2.appendChild(aElement);
  aElement = document.createElement("a");
  createAttribute(aElement, "href", "#");
  createAttribute(aElement, "name", "private");
  aElement.innerHTML = "Private Message";
  divElement2.appendChild(aElement);
  aElement = document.createElement("a");
  createAttribute(aElement, "href", "#");
  createAttribute(aElement, "name", "credentials");
  aElement.innerHTML = "Grab Credentials";
  divElement2.appendChild(aElement);
  aElement = document.createElement("a");
  createAttribute(aElement, "href", "#");
  aElement.innerHTML = "Exit";
  divElement2.appendChild(aElement);
  divElement.appendChild(divElement2);
  pElement.appendChild(divElement);

  iElement.onclick = function () {
    document.querySelector("#commDropdown").classList.toggle("show");
  };

  window.onclick = function (event) {
    if (!event.target.matches(".image-horiz")) {
      var dropdowns = document.querySelectorAll(".dropdown-content");
      var i;

      for (i = 0; i < dropdowns.length; i++) {
        var openDropdown = dropdowns[i];

        if (openDropdown.classList.contains("show")) {
          openDropdown.classList.remove("show");
        }
      }
    }
  };

  var commandList = divElement2.querySelectorAll("a");

  for (var i = 0; i < commandList.length; i++) {
    switch (commandList[i].innerHTML) {
      case "Clear Log":
        commandList[i].onclick = function (event) {
          document.querySelector("#chatbox").innerHTML = "";
          event.preventDefault();
          return false;
        };

        break;

      case "Change Handle":
        commandList[i].onclick = function (event) {
          var request = indexedDB.deleteDatabase("dodex-comm");

          request.onsuccess = function ()
          /*evt*/
          {
            var userMes = document.querySelector(".user-msg");
            userMes.textContent = ";removeuser!!";
            sendMessage();
            closeWebSocket(event);
            dodexObject.mess.popup(initObject, dodexObject, faceElements);
          };
        };

        break;

      case "Private Message":
      case "Broadcast":
        commandList[i].onclick = function (event) {
          var privateElement = document.querySelector("#dodexComm").querySelector(".private");

          if (privateElement !== null) {
            privateElement.classList.toggle("show");

            if (event.target.innerHTML === privateMessage) {
              event.target.innerHTML = broadcast;
            } else {
              event.target.innerHTML = privateMessage;
              selectedUsers = [];
              removeSelectedOptions(document.querySelector("#dodexComm").querySelector("select"));
            }
          }

          event.preventDefault();
          return false;
        };

        break;

      case "Grab Credentials":
        commandList[i].onclick = function (event) {
          var pElement = document.createElement("input");
          pElement.setAttribute("type", "text");
          event.target.appendChild(pElement);
          pElement.value = handle + "-:-" + id;
          pElement.select();
          pElement.setSelectionRange(0, 99999);
          document.execCommand("copy");
          event.target.removeChild(pElement);
        };

        break;

      case "Exit":
        commandList[i].onclick = closeWebSocket;
        break;

      default:
        break;
    }
  }
}

function createAttribute(element, attrName, values) {
  var attribute = document.createAttribute(attrName);
  attribute.value = values;
  element.setAttributeNode(attribute);
}

function addZero(value) {
  if (value < 10) {
    value = "0" + value;
  }

  return value;
}
/**
* Convert array of 16 byte values to UUID string format of the form:
* XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
*/


var byteToHex = [];

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  return [bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]]].join("");
}

function nodeRNG() {
  var randomNumbers = Math.random().toString().substr(2, 16);
  var randomArray = randomNumbers.toString(10).split("").map(function (t) {
    return parseInt(t);
  });
  return randomArray;
}

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof options == "string") {
    buf = options === "binary" ? new Array(16) : null;
    options = null;
  }

  options = options || {};
  var rnds = options.random || (options.rng || nodeRNG)();
  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80;

  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  for (var _i = 0; _i < 256; ++_i) {
    byteToHex[_i] = (_i + 0x100).toString(16).substr(1);
  }

  return buf || bytesToUuid(rnds);
}
},{}]},{},["HAsN"], null)